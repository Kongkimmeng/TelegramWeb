@inject IConfiguration Configuration
@inject IJSRuntime JS
@inject ITelegramService TelegramService


<Modal @ref="modal" Title="@Title" IsScrollable="true" Size="ModalSize.Large" Class="assign-modal" UseStaticBackdrop="true" CloseOnEscape="false" ShowCloseButton="false">
    <BodyTemplate>
        <div class="row">
            <!-- Left Side: Employees -->
            <div class="col-6 p-2 employee-panel" style="border-right:solid 1px #cccc">
              
                <select @bind="selectedEmpId" class="custom-select" style="margin-bottom:10px">
                    @foreach (var emp in EmpList)
                    {
                        <option value="@emp.EmpID">@emp.Name</option>
                    }
                </select>
              
                <button class="btn btn-primary custom-btn" style="margin-bottom:2px" @onclick="OnAssign">Assign</button>
                

                @if (EmpList_Assigned.Count == 0)
                {
                    <div class="empty-text">No employees assigned yet.</div>
                }
                else
                {
                    @foreach (var emp in EmpList_Assigned)
                    {
                        <div class="item-row">
                            <div>@emp.Name</div>
                            <button class="btn btn-danger custom-btn" @onclick="() => OnUnassign(emp)">Unassign</button>
                        </div>
                    }
                }
            </div>

            <!-- Right Side: Teams -->
            <div class="col-6 p-2 team-panel">
                <select @bind="selectedTeamId" class="custom-select" style="margin-bottom:10px">
                    @foreach (var team in TeamList)
                    {
                        <option value="@team.TeamID">@team.TeamName</option>
                    }
                </select>
                <button class="btn btn-primary custom-btn" style="margin-bottom:2px" @onclick="OnAssignTeam">Assign Team</button>

                @if (TeamList_Assigned.Count == 0) 
                {
                    <div class="empty-text">No teams assigned yet.</div>
                }
                else
                {
                    @foreach (var team in TeamList_Assigned)
                    {
                        <div class="item-row">
                            <div>@team.TeamName</div>
                            <button class="btn btn-danger custom-btn" @onclick="() => OnUnassignTeam(team)">Unassign</button>
                        </div>
                    }
                }
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="HandleClose">Close</button>
    </FooterTemplate>
</Modal>
<style>
    /* Modal container */
    .assign-modal .employee-panel,
    .assign-modal .team-panel {
        /* border: 1px solid #ccc; */
        padding: 10px;
    }



    /* Custom select */
    .custom-select {
        font-size: 14px;
        min-width: 200px;
        padding: 4px 10px;
    }

    /* Custom small buttons */
    .custom-btn {
        font-size: 12px;
        padding: 4px 8px;
    }

    /* Empty text placeholder */
    .empty-text {
        text-align: center;
        color: #888;
        border: 1px solid #ddd;
        padding: 10px;
        margin-top: 5px;
        background-color: #f5f5f5;
    }

    /* Assigned item row */
    .item-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        border: 1px solid #ddd;
        padding: 5px 10px;
        margin-top: 5px;
        border-radius: 10px;
        background-color: #fff;
    }

  
</style>


@code {
    [Parameter] public string Title { get; set; }
    [Parameter] public long ChatID { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private Modal modal = default!;

    private List<TelegramEmpAssign> EmpList = new();
    private List<TelegramEmpAssign> EmpList_Assigned = new();

    private List<TeamModel> TeamList = new();
    private List<TelegramTeamAssign> TeamList_Assigned = new();

    private string selectedEmpId;
    private int selectedTeamId;
    string _connectionString = "";

    private async Task HandleClose()
    {
        if (OnClose.HasDelegate)
        {
            await modal.HideAsync();
            if (OnClose.HasDelegate)
            {
                await OnClose.InvokeAsync();
            }
        }
    }
    public async Task ShowAsync()
    {
        if (modal != null)
        {
            await LoadAssignedData();
            await modal.ShowAsync();
        }
    }

    public async Task HideAsync()
    {
        if (modal != null)
        {
            await modal.HideAsync();
        }
    }
    protected override async Task OnParametersSetAsync()
    {
        if (ChatID != 0)  // ignore default value
        {
            await LoadAssignedData();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _connectionString = Configuration.GetConnectionString("AMIS_Data");

            using var connection = new SqlConnection(_connectionString);

            // Load employee list
            EmpList = (await connection.QueryAsync<TelegramEmpAssign>("sp_TelegramWeb_EmpList", commandType: CommandType.StoredProcedure))
                      .ToList();

            // Load team list
            TeamList = (await connection.QueryAsync<TeamModel>("sp_TelegramWeb_TeamList", commandType: CommandType.StoredProcedure))
                       .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task LoadAssignedData()
    {
        using var conn = new SqlConnection(_connectionString);
        EmpList_Assigned = (await conn.QueryAsync<TelegramEmpAssign>(
                                "sp_TelegramWeb_Emp_Assign_Get",
                                new { ChatID },
                                commandType: CommandType.StoredProcedure
                            )).ToList();



        TeamList_Assigned = (await conn.QueryAsync<TelegramTeamAssign>(
            "sp_TelegramWeb_Team_Assign_Get",
            new { ChatID },
            commandType: CommandType.StoredProcedure
        )).ToList();
        StateHasChanged();

    }
    private async Task OnAssign()
    {
        var emp = EmpList.FirstOrDefault(e => e.EmpID == selectedEmpId && !EmpList_Assigned.Any(a => a.EmpID == e.EmpID));
        if (emp != null)
        {
            using var connection = new SqlConnection(Configuration.GetConnectionString("AMIS_Data"));
            await connection.ExecuteAsync(
                "sp_TelegramWeb_Assign_Set",
                new { ChatID = ChatID, EmpID = emp.EmpID, Assign = true },
                commandType: CommandType.StoredProcedure
            );


            // ✅ Notify user through Telegram bot
            if (!string.IsNullOrEmpty(emp.FromUserID))
            {
                await TelegramService.SendTelegramNotification(emp.FromUserID, $"You have been Assigned to Group: {Title}");
            }

            selectedEmpId = "";


            // EmpList_Assigned.Add(emp.);
        }





        await LoadAssignedData();

    }

    private async Task OnUnassign(TelegramEmpAssign emp)
    {
        using var connection = new SqlConnection(Configuration.GetConnectionString("AMIS_Data"));
        await connection.ExecuteAsync(
            "sp_TelegramWeb_Assign_Set",
            new { ChatID = ChatID, EmpID = emp.EmpID, Assign = false },
            commandType: CommandType.StoredProcedure
        );


        // ✅ Notify user through Telegram bot
        if (!string.IsNullOrEmpty(emp.FromUserID))
        {
            await TelegramService.SendTelegramNotification(emp.FromUserID, $"You have been Unassigned from Group: {Title}");
        }

        await LoadAssignedData();
    }

    private async Task OnAssignTeam()
    {
        var team = TeamList.FirstOrDefault(e => e.TeamID == selectedTeamId && !TeamList_Assigned.Any(a => a.TeamID == e.TeamID));
        if (team != null)
        {
            using var connection = new SqlConnection(Configuration.GetConnectionString("AMIS_Data"));
            await connection.ExecuteAsync(
                "sp_TelegramWeb_Assign_Set",
                new { ChatID = ChatID, TeamID = team.TeamID, Assign = true },
                commandType: CommandType.StoredProcedure
            );

            await LoadAssignedData();
        }
    }

    private async Task OnUnassignTeam(TelegramTeamAssign team)
    {
        using var connection = new SqlConnection(Configuration.GetConnectionString("AMIS_Data"));
        await connection.ExecuteAsync(
            "sp_TelegramWeb_Assign_Set",
            new { ChatID = ChatID, TeamID = team.TeamID, Assign = false },
            commandType: CommandType.StoredProcedure
        );

        await LoadAssignedData();
    }

}
