@inject IConfiguration Configuration
@inject IJSRuntime JS
@inject ITelegramService TelegramService

@if (ChatID != 0)
{
    <div class="d-flex" style="border-bottom:solid 1px #ccc;border-top:none; margin-left:0px; height:30px">
        <div class="d-flex align-items-center">
            <label style="padding-left:15px; font-weight:bold;">
                Info : @Title
            </label>
        </div>
    </div>

    <div class="m-2">
        @if (tags == null || tags.Count == 0)
        {
            <p><em>No tags yet.</em></p>
        }
        else
        {
            <ul class="list-group">
                @foreach (var tag in tags)
                {
                    <li class="list-group-item">
                        @if (editTagId == tag.TagID)
                        {
                            <div>
                                <div class="mb-1">
                                    <input class="form-control form-control-sm mb-1" placeholder="Field Name" @bind="tag.FieldName" />
                                    <input class="form-control form-control-sm" placeholder="Field Value" @bind="tag.FieldValue" />
                                </div>
                                <div class="mt-1">
                                    <span class="icon-btn text-success me-2" title="Save" @onclick="() => UpdateTag(tag)">✔ Save</span>
                                    <span class="icon-btn text-danger me-2" title="Delete" @onclick="() => DeleteTag(tag.TagID)">✖ Delete</span>
                                    <span class="icon-btn text-secondary" title="Cancel" @onclick="() => editTagId = null">✖ Cancel</span>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="d-flex justify-content-between align-items-center">
                                <span><b>@tag.FieldName</b>: @tag.FieldValue</span>
                                <span class="icon-btn text-primary" title="Edit" @onclick="() => editTagId = tag.TagID">✎</span>
                            </div>
                        }
                    </li>
                }
            </ul>
        }

        <!-- Add new tag input -->
        @if (showAddTagForm)
        {
            <div class="mb-2 mt-1">
                <div class="mb-1">
                    <input class="form-control form-control-sm mb-1" placeholder="Field Name" @bind="newFieldName" />
                    <input class="form-control form-control-sm" placeholder="Field Value" @bind="newFieldValue" />
                </div>
                <div class="mt-1">
                    <span class="icon-btn text-success me-2" title="Save" @onclick="AddTag">✔ Save</span>
                    <span class="icon-btn text-danger me-2" title="Cancel" @onclick="CancelAddTag">✖ Cancel</span>
                </div>
            </div>
        }
        else
        {
            <div class="d-flex justify-content-end mt-2 me-2">
                <span class="icon-btn text-success" title="Add Tag" @onclick="() => showAddTagForm = true">
                    <Icon Name="IconName.PlusCircleFill" /> Add Tag
                </span>
            </div>
        }

    </div>
}
else
{
    <div>please check Group Name</div>
}


<ConfirmDialog @ref="confirmDialog" />





<style>
    .icon-btn {
        cursor: pointer;
        font-size: 14px;
        padding: 2px 5px;
    }

    .list-group-item {
        font-size: 13px;
        padding: 5px 10px;
    }
</style>

@code {
    [Parameter] public long ChatID { get; set; }
    [Parameter] public string Title { get; set; }
    [Parameter] public string EmpID { get; set; }



    private ConfirmDialog confirmDialog;

    private List<MoreInfoTag> tags = new();
    private string newFieldName;
    private string newFieldValue;
    private bool showAddTagForm = false;
    private int? editTagId = null;

    string _connectionString = "";

    protected override async Task OnInitializedAsync()
    {
        _connectionString = Configuration.GetConnectionString("AMIS_Data");

      

        // if (ChatID != 0)
        // {
        //     await LoadAssignedData();
        //     await LoadTags();
        //     Console.WriteLine("book1");
        // }

    }



    protected override async Task OnParametersSetAsync()
    {
        if (ChatID != 0)
        {
            await LoadTags();
            Console.WriteLine("book2");
        }

    }


    private async Task LoadTags()
    {
        using var conn = new SqlConnection(_connectionString);
        tags = (await conn.QueryAsync<MoreInfoTag>(
                    "sp_TelegramWeb_Tag_Get",
                    new { ChatID },
                    commandType: CommandType.StoredProcedure))
                .ToList();
    }

    private async Task AddTag()
    {
        if (string.IsNullOrWhiteSpace(newFieldName))
            return;

        bool confirmed = await confirmDialog.ShowAsync(
            title: "Confirm Add",
            message1: $"Do you want to add tag '{newFieldName}'?"
        );

        if (!confirmed) return;

        using var conn = new SqlConnection(_connectionString);

        var newId = await conn.ExecuteScalarAsync<int>(
            "sp_TelegramWeb_Tag_Add",
            new
            {
                ChatID,
                BookID = 1,
                FieldName = newFieldName,
                FieldValue = newFieldValue,
                CreateBy = EmpID
            },
            commandType: CommandType.StoredProcedure
        );

        tags.Add(new MoreInfoTag
        {
            TagID = newId,
            ChatID = ChatID,
            BookID = 1,
            FieldName = newFieldName,
            FieldValue = newFieldValue,
            CreateBy = EmpID,
            CreateDate = DateTime.Now
        });

        newFieldName = "";
        newFieldValue = "";
        showAddTagForm = false;
    }

    private async Task UpdateTag(MoreInfoTag tag)
    {
        bool confirmed = await confirmDialog.ShowAsync(
            title: "Confirm Update",
            message1: $"Do you want to update tag '{tag.FieldName}'?"
        );

        if (!confirmed) return;

        using var conn = new SqlConnection(_connectionString);

        await conn.ExecuteAsync(
            "sp_TelegramWeb_Tag_Update",
            new { tag.TagID, tag.FieldName, tag.FieldValue, UpdateBy = EmpID },
            commandType: CommandType.StoredProcedure
        );

        editTagId = null;
    }

    private void CancelAddTag()
    {
        newFieldName = "";
        newFieldValue = "";
        showAddTagForm = false;
    }
    private async Task DeleteTag(int tagId)
    {
        bool confirmed = await confirmDialog.ShowAsync(
            title: "Confirm Delete",
            message1: $"Are you sure you want to delete this tag?"
        );

        if (!confirmed) return;

        using var conn = new SqlConnection(_connectionString);

        await conn.ExecuteAsync(
            "sp_TelegramWeb_Tag_Delete",
            new { TagID = tagId },
            commandType: CommandType.StoredProcedure
        );

        tags.RemoveAll(t => t.TagID == tagId);
    }






}



